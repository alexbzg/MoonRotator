<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrimS.Telnet</name>
    </assembly>
    <members>
        <member name="T:PrimS.Telnet.BaseClient">
            <summary>
            The base class for Clients.
            </summary>
            <summary>
            The base class for Clients.
            </summary>
        </member>
        <member name="F:PrimS.Telnet.BaseClient.DefaultTimeoutMs">
            <summary>
            The default time out ms.
            </summary>
        </member>
        <member name="F:PrimS.Telnet.BaseClient.DefaultMillisecondReadDelay">
            <summary>
            The default read delay ms.
            </summary>
        </member>
        <member name="F:PrimS.Telnet.BaseClient.byteStream">
            <summary>
            The byte stream.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.BaseClient.MillisecondReadDelay">
            <inheritdoc/>
        </member>
        <member name="P:PrimS.Telnet.BaseClient.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:PrimS.Telnet.BaseClient.ByteStream">
            <summary>
            Gets the byte stream.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.IsTerminatorLocated(System.String,System.String)">
            <summary>
            Determines whether the specified terminator has been located.
            </summary>
            <param name="terminator">The terminator to search for.</param>
            <param name="s">The content to search for the <paramref name="terminator"/>.</param>
            <returns>True if the terminator is located, otherwise false.</returns>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.IsRegexLocated(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Determines whether the specified Regex has been located.
            </summary>
            <param name="regex">The Regex to search for.</param>
            <param name="s">The content to search for the <paramref name="regex"/>.</param>
            <returns>True if the Regex is matched, otherwise false.</returns>
        </member>
        <member name="F:PrimS.Telnet.BaseClient.sendRateLimit">
            <summary>
            The send rate limit.
            </summary>
        </member>
        <member name="F:PrimS.Telnet.BaseClient.internalCancellation">
            <summary>
            The internal cancellation token.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.#ctor(PrimS.Telnet.IByteStream,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.BaseClient"/> class.
            </summary>
            <param name="byteStream">The byte stream.</param>
            <param name="token">The token.</param>
        </member>
        <member name="P:PrimS.Telnet.BaseClient.SendRateLimit">
            <summary>
            Gets the send rate limit.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.BaseClient.InternalCancellation">
            <summary>
            Gets the internal cancellation token.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.SendCancel">
            <summary>
            Add null check to cancel commands. Fail gracefully.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.BaseClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:PrimS.Telnet.ByteStreamHandler">
            <summary>
            Provides core functionality for interacting with the ByteStream.
            </summary>
            <summary>
            Provides core functionality for interacting with the ByteStream.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.RetrieveAndParseResponse(System.Text.StringBuilder)">
            <summary>
            Separate TELNET commands from text. Handle non-printable characters.
            </summary>
            <param name="sb">The incoming message.</param>
            <returns>True if response is pending.</returns>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.InterpretNextAsCommand(System.Int32)">
            <summary>
            We received a TELNET command. Handle it.
            </summary>
            <param name="inputVerb">The command we received.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.PerformNegotiation">
            <summary>
            We received a request to perform sub negotiation on a TELNET option.
            <see cref="P:PrimS.Telnet.Client.TerminalType"/> and <see cref="P:PrimS.Telnet.Client.TerminalSpeed"/> can be configured via static properties on the <see cref="T:PrimS.Telnet.Client"/> class.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.SendNegotiation(System.Int32,System.String)">
            <summary>
            Send the sub negotiation response to the server.
            </summary>
            <param name="inputOption">The option we are negotiating.</param>
            <param name="optionMessage">The setting for <paramref name="inputOption"/>.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.ReplyToCommand(System.Int32)">
            <summary>
            Send TELNET command response to the server.
            Replies to all commands with <see cref="F:PrimS.Telnet.Commands.Wont"/>||<see cref="F:PrimS.Telnet.Commands.Dont"/> unless it is <see cref="F:PrimS.Telnet.Options.SuppressGoAhead"/>, <see cref="F:PrimS.Telnet.Options.TerminalType"/>, or <see cref="F:PrimS.Telnet.Options.TerminalSpeed"/>.
            </summary>
            <param name="inputVerb">The TELNET command we received.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.#ctor(PrimS.Telnet.IByteStream)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.ByteStreamHandler"/> class.
            </summary>
            <param name="byteStream">The byteStream to handle.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.#ctor(PrimS.Telnet.IByteStream,System.Threading.CancellationTokenSource)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.ByteStreamHandler"/> class.
            </summary>
            <param name="byteStream">The byteStream to handle.</param>
            <param name="internalCancellation">A cancellation token.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.#ctor(PrimS.Telnet.IByteStream,System.Threading.CancellationTokenSource,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.ByteStreamHandler"/> class.
            </summary>
            <param name="byteStream">The byteStream to handle.</param>
            <param name="internalCancellation">A cancellation token.</param>
            <param name="millisecondReadDelay">Time to delay between reads from the stream.</param>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.ReadAsync(System.TimeSpan)">
            <summary>
            Reads asynchronously from the stream.
            </summary>
            <param name="timeout">The rolling timeout to wait for no further response from stream.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.ByteStreamHandler.SendCancel">
            <summary>
            Add null check to cancel commands. Fail gracefully.
            </summary>
        </member>
        <member name="T:PrimS.Telnet.Client">
            <summary>
            Basic Telnet client.
            Terminal type and speed can be configured via static properties on the <see cref="T:PrimS.Telnet.Client"/> class.
            <see cref="T:PrimS.Telnet.Client"/>.IsWriteConsole can be used to configure whether to write output to the console; often useful for debugging purposes.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.Client.TryLoginAsync(System.String,System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TryLoginAsync(System.String,System.String,System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.WriteLineAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.WriteLineRfc854Async(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.WriteLineAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.WriteAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TerminatedReadAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TerminatedReadAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TerminatedReadAsync(System.Text.RegularExpressions.Regex,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TerminatedReadAsync(System.String,System.TimeSpan,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.TerminatedReadAsync(System.Text.RegularExpressions.Regex,System.TimeSpan,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.Client.ReadAsync(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="F:PrimS.Telnet.Client.LegacyLineFeed">
            <summary>
            Prior to v0.9.0 LegacyLineFeed was the default. To be Rfc854 compliant you should prefer Rfc854LineFeed.
            </summary>
        </member>
        <member name="F:PrimS.Telnet.Client.Rfc854LineFeed">
            <summary>
            Post to v0.9.0 LegacyLineFeed has been retained as the default, but to be Rfc854 compliant you should prefer this.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.Client.#ctor(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.Client"/> class.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="port">The port.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:PrimS.Telnet.Client.#ctor(PrimS.Telnet.IByteStream,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.Client"/> class.
            </summary>
            <param name="byteStream">The stream served by the host connected to.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="M:PrimS.Telnet.Client.#ctor(PrimS.Telnet.IByteStream,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.Client"/> class.
            </summary>
            <param name="byteStream">The stream served by the host connected to.</param>
            <param name="timeout">The timeout to wait for initial successful connection to <cref>byteStream</cref>.</param>
            <param name="token">The cancellation token.</param>
        </member>
        <member name="P:PrimS.Telnet.Client.IsWriteConsole">
            <summary>
            Gets and sets a value indicating whether the <see cref="T:PrimS.Telnet.Client"/> should write responses received via <see cref="T:PrimS.Telnet.ByteStreamHandler"/>.Read to the Console.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.Client.TerminalType">
            <summary>
            Gets and sets the TerminalType to negotiate.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.Client.TerminalSpeed">
            <summary>
            Gets and sets the TerminalSpeed to negotiate.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.Client.ProactiveOptionNegotiation">
            <summary>
            Sending <see cref="F:PrimS.Telnet.Commands.Do"/> <see cref="F:PrimS.Telnet.Options.SuppressGoAhead"/> up front will get us to the logon prompt faster.
            </summary>
        </member>
        <member name="T:PrimS.Telnet.Guard">
            <summary>
            Provides guard clauses.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.Guard.AgainstNullArgument``1(System.String,``0)">
            <summary>
            Guards against a null argument.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument" /> is <c>null</c>.</exception>
            <remarks>
            <typeparamref name="TArgument"/> is restricted to reference types to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:PrimS.Telnet.Guard.AgainstNullArgumentIfNullable``1(System.String,``0)">
            <summary>
            Guards against a null argument if <typeparamref name="TArgument" /> can be <c>null</c>.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argument" /> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:PrimS.Telnet.Guard.AgainstNullArgumentProperty``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty" /> is <c>null</c>.</exception>
            <remarks>
            <typeparamref name="TProperty"/> is restricted to reference types to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:PrimS.Telnet.Guard.AgainstNullArgumentPropertyIfNullable``1(System.String,System.String,``0)">
            <summary>
            Guards against a null argument property value if <typeparamref name="TProperty"/> can be <c>null</c>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="argumentProperty">The argument property.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argumentProperty" /> is <c>null</c>.</exception>
            <remarks>
            Performs a type check to avoid boxing of value type objects.
            </remarks>
        </member>
        <member name="M:PrimS.Telnet.Guard.IsNullableType(System.Type)">
            <summary>
            Determines whether the specified type is a nullable type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is a nullable type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PrimS.Telnet.Guard.ValidatedNotNullAttribute">
            <summary>
            When applied to a parameter,
            this attribute provides an indication to code analysis that the argument has been null checked.
            </summary>
        </member>
        <member name="T:PrimS.Telnet.IBaseClient">
            <summary>
            Base client behaviour.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.IBaseClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrimS.Telnet.IBaseClient.MillisecondReadDelay">
            <summary>
            The read delay ms.
            </summary>
        </member>
        <member name="T:PrimS.Telnet.IByteStream">
            <summary>
            Contract of core functionality provided by a ByteStream.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.IByteStream.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>
            The number of bytes of data received from the network and available to be read.
            </value>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Net.Sockets.Socket has been closed.</exception>
        </member>
        <member name="P:PrimS.Telnet.IByteStream.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:PrimS.Telnet.IByteStream"/> is connected.
            </summary>
            <value>
              <c>True</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrimS.Telnet.IByteStream.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time this <see cref="T:PrimS.Telnet.IByteStream"/> will wait to receive data once a read operation is initiated.
            </summary>
            <value>
            The time-out value of the connection in milliseconds. The default value is 0.
            </value>
        </member>
        <member name="M:PrimS.Telnet.IByteStream.Close">
            <summary>
            Disposes the instance and requests that the underlying connection be closed.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.IByteStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an integer, or -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:PrimS.Telnet.IByteStream.WriteByteAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:PrimS.Telnet.IByteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
            <exception cref="T:System.ArgumentNullException">The buffer parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or count is negative.</exception>
            <exception cref="T:System.ArgumentException">The offset parameter is less than 0.-or- The offset parameter is greater than the length of buffer.-or- The size parameter is less than 0.-or- The size parameter is greater than the length of buffer minus the value of the offset parameter.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
        </member>
        <member name="M:PrimS.Telnet.IByteStream.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a string to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
            </summary>
            <param name="value">The string to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
            <exception cref="T:System.ArgumentNullException">The buffer parameter is null.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
        </member>
        <member name="T:PrimS.Telnet.IByteStreamHandler">
            <summary>
            Contract of core functionality required to interact with a ByteStream.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.IByteStreamHandler.ReadAsync(System.TimeSpan)">
            <summary>
            Reads for up to the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>A task representing the asynchronous read action.</returns>
        </member>
        <member name="T:PrimS.Telnet.IClient">
            <summary>
            Telnet Client behaviour.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.IClient.ReadAsync">
            <summary>
            Reads asynchronously from the stream.
            </summary>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.ReadAsync(System.TimeSpan)">
            <summary>
            Reads asynchronously from the stream.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TerminatedReadAsync(System.Text.RegularExpressions.Regex,System.TimeSpan)">
            <summary>
            Reads asynchronously from the stream, terminating as soon as the <paramref name="regex"/> is located.
            </summary>
            <param name="regex">The regex to match.</param>
            <param name="timeout">The timeout.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TerminatedReadAsync(System.Text.RegularExpressions.Regex,System.TimeSpan,System.Int32)">
            <summary>
            Reads asynchronously from the stream, terminating as soon as the <paramref name="regex"/> is matched.
            </summary>
            <param name="regex">The regex to match.</param>
            <param name="timeout">The maximum time to wait.</param>
            <param name="millisecondSpin">The millisecond spin between each read from the stream.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TerminatedReadAsync(System.String)">
            <summary>
            Reads asynchronously from the stream, terminating as soon as the <paramref name="terminator"/> is located.
            </summary>
            <param name="terminator">The terminator.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TerminatedReadAsync(System.String,System.TimeSpan)">
            <summary>
            Reads asynchronously from the stream, terminating as soon as the <paramref name="terminator"/> is located.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="timeout">The timeout.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TerminatedReadAsync(System.String,System.TimeSpan,System.Int32)">
            <summary>
            Reads asynchronously from the stream, terminating as soon as the <paramref name="terminator"/> is located.
            </summary>
            <param name="terminator">The terminator.</param>
            <param name="timeout">The maximum time to wait.</param>
            <param name="millisecondSpin">The millisecond spin between each read from the stream.</param>
            <returns>Any text read from the stream.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TryLoginAsync(System.String,System.String,System.Int32,System.String)">
            <summary>
            Syntactic sugar; tries to login asynchronously, passing in a default LineTerminator of ">".
            Anticipates a terminator (TerminatedRead); responds with username (WriteLine).
            Anticipates another terminator (TerminatedRead); responds with password (WriteLine).
            This is just a proxy for common Telnet behavour, but of course it relies on the Server implementing the expected behaviour.
            If the server you're connecting to does anything different, just use custom TerminatedReads followed by WriteLines.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="loginTimeoutMs">The login timeout ms.</param>
            <param name="lineFeed">The line feed to use. Issue 38: According to RFC 854, CR+LF should be the default a client sends. For backward compatibility \n maintained.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.TryLoginAsync(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Syntactic sugar; tries to login asynchronously. 
            Anticipates a terminator (TerminatedRead); responds with username (WriteLine).
            Anticipates another terminator (TerminatedRead); responds with password (WriteLine).
            This is just a proxy for common Telnet behavour, but of course it relies on the Server implementing the expected behaviour.
            If the server you're connecting to does anything different, just use custom TerminatedReads followed by WriteLines.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="loginTimeoutMs">The login timeout ms.</param>
            <param name="terminator">The prompt terminator to anticipate.</param>
            <param name="lineFeed">The line feed to use. Issue 38: According to RFC 854, CR+LF should be the default a client sends. For backward compatibility \n maintained.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.WriteAsync(System.Byte[])">
            <summary>
            Writes the specified <paramref name="data"/> to the server.
            </summary>
            <param name="data">The byte array to send.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.WriteAsync(System.String)">
            <summary>
            Writes the specified <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.WriteLineAsync(System.String)">
            <summary>
            Writes the specified <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.WriteLineAsync(System.String,System.String)">
            <summary>
            Writes the specified <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command.</param>
            <param name="lineFeed">The type of lineFeed to use. For legacy reasons the default "\n" is supplied, but to be RFC854 compliant "\r\n" should be supplied.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:PrimS.Telnet.IClient.WriteLineRfc854Async(System.String)">
            <summary>
            Writes the specified <paramref name="command"/> to the server.
            </summary>
            <param name="command">The command.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="T:PrimS.Telnet.INetworkStream">
            <summary>
            A network stream that can be read and written to.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.INetworkStream.ReadByte">
            <summary>
            Reads the next byte.
            </summary>
            <returns>The next byte read.</returns>
        </member>
        <member name="M:PrimS.Telnet.INetworkStream.WriteByteAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Writes the byte.
            </summary>
            <param name="value">The value to write.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:PrimS.Telnet.INetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <param name="cancellationToken">The cancellationToken.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:PrimS.Telnet.ISocket">
            <summary>
            A socket to connect to.
            </summary>
        </member>
        <member name="P:PrimS.Telnet.ISocket.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:PrimS.Telnet.ISocket" /> is connected.
            </summary>
            <value>
            <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrimS.Telnet.ISocket.Available">
            <summary>
            Gets the available bytes to be read.
            </summary>
            <value>
            The available bytes to be read.
            </value>
        </member>
        <member name="P:PrimS.Telnet.ISocket.ReceiveTimeout">
            <summary>
            Gets or sets the receive timeout.
            </summary>
            <value>
            The receive timeout.
            </value>
        </member>
        <member name="M:PrimS.Telnet.ISocket.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>Network stream socket connected to.</returns>
        </member>
        <member name="M:PrimS.Telnet.ISocket.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:PrimS.Telnet.NetworkStream">
            <summary>
            An implementation of a network stream to read from and write to.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.#ctor(System.Net.Sockets.NetworkStream)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.NetworkStream" /> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.ReadByte">
            <summary>
            Reads the next byte.
            </summary>
            <returns>
            The next byte read.
            </returns>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.WriteByteAsync(System.Byte,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.NetworkStream.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PrimS.Telnet.PreprocessorAsyncAdapter.Execute(System.Func{System.Threading.Tasks.Task})">
            <summary>
            The preferred Execute which just returns the task, no internal async await .ConfigureAwait(false)
            Add:
            #if ASYNC
                return
            #endif
            before the call.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:PrimS.Telnet.PreprocessorAsyncAdapter.ExecuteWithConfigureAwait(System.Func{System.Threading.Tasks.Task})">
            <summary>
            The Execute which awaits the task internally with .ConfigureAwait(false). Prefer Execute which just returns the Task.
            Add:
            #if ASYNC
                await
            #endif
            before the call.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:PrimS.Telnet.PreprocessorAsyncAdapter.Execute``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            The preferred Execute which just returns the task, no internal async await .ConfigureAwait(false)
            Add:
            #if ASYNC
                return
            #endif
            before the call.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:PrimS.Telnet.PreprocessorAsyncAdapter.ExecuteWithConfigureAwait``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            The Execute which awaits the task internally with .ConfigureAwait(false). Prefer Execute which just returns the Task.
            Add:
            #if ASYNC
                await
            #endif
            before the call.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="T:PrimS.Telnet.TcpByteStream">
            <summary>
            A ByteStream acting over a TCP channel.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.TcpByteStream" /> class.
            </summary>
            <param name="hostName">The host name.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.#ctor(PrimS.Telnet.ISocket)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.TcpByteStream" /> class.
            </summary>
            <param name="tcpSocket">The TCP socket.</param>
        </member>
        <member name="P:PrimS.Telnet.TcpByteStream.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>
            The number of bytes of data received from the network and available to be read.
            </value>
        </member>
        <member name="P:PrimS.Telnet.TcpByteStream.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:PrimS.Telnet.IByteStream" /> is connected.
            </summary>
            <value>
              <c>True</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrimS.Telnet.TcpByteStream.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time this <see cref="T:PrimS.Telnet.IByteStream" /> will wait to receive data once a read operation is initiated.
            </summary>
            <value>
            The time-out value of the connection in milliseconds. The default value is 0.
            </value>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an integer, or -1 if at the end of the stream.
            </returns>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.WriteByteAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.WriteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified value to the stream.
            </summary>
            <param name="value">The value.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous action.</returns>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.Close">
            <summary>
            Disposes the instance and requests that the underlying connection be closed.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpByteStream.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:PrimS.Telnet.TcpClient">
            <summary>
            A TcpClient to connect to the specified socket.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.TcpClient"/> class.
            </summary>
            <param name="hostName">The host name.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initialises a new instance of the <see cref="T:PrimS.Telnet.TcpClient"/> class.
            </summary>
            <param name="client">The <see cref="T:System.Net.Sockets.TcpClient"/> instance to wrap.</param>
        </member>
        <member name="P:PrimS.Telnet.TcpClient.ReceiveTimeout">
            <summary>
            Gets or sets the receive timeout.
            </summary>
            <value>
            The receive timeout.
            </value>
        </member>
        <member name="P:PrimS.Telnet.TcpClient.Connected">
            <summary>
            Gets a value indicating whether this <see cref="T:PrimS.Telnet.ISocket" /> is connected.
            </summary>
            <value>
              <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PrimS.Telnet.TcpClient.Available">
            <summary>
            Gets the available bytes to be read.
            </summary>
            <value>
            The available bytes to be read.
            </value>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.GetStream">
            <summary>
            Gets the stream.
            </summary>
            <returns>
            Network stream socket connected to.
            </returns>
        </member>
        <member name="M:PrimS.Telnet.TcpClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
